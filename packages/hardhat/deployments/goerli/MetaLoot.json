{
  "address": "0xd7162092f616ab0d9c14BfA29c38Ab781D90D345",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "name": "Activate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "saleTokenId",
          "type": "uint256"
        }
      ],
      "name": "Deactivate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentTokenContract_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salePrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numItems",
          "type": "uint256"
        }
      ],
      "name": "buyMetaLoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentTokenContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        }
      ],
      "name": "updateTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea0e4fdc79764545cfe6747df129d949af40bcf0213ea7c59f05b24ff1828689",
  "receipt": {
    "to": null,
    "from": "0x4EF578dff126703E48a1322c6d8D3644c27Ea7E6",
    "contractAddress": "0xd7162092f616ab0d9c14BfA29c38Ab781D90D345",
    "transactionIndex": 21,
    "gasUsed": "2660903",
    "logsBloom": "0x
    "blockHash": "0x980ef93ceb8dbd81ea53e8b9f29264daad74dc14dc311aa7290355abe35b311a",
    "transactionHash": "0xea0e4fdc79764545cfe6747df129d949af40bcf0213ea7c59f05b24ff1828689",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 5615335,
        "transactionHash": "0xea0e4fdc79764545cfe6747df129d949af40bcf0213ea7c59f05b24ff1828689",
        "address": "0xd7162092f616ab0d9c14BfA29c38Ab781D90D345",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ef578dff126703e48a1322c6d8d3644c27ea7e6"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x980ef93ceb8dbd81ea53e8b9f29264daad74dc14dc311aa7290355abe35b311a"
      }
    ],
    "blockNumber": 5615335,
    "cumulativeGasUsed": "7433085",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://"
  ],
  "solcInputHash": "000bf21d9d7fd3c9d93a6a6a5bb6654d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleTokenId\",\"type\":\"uint256\"}],\"name\":\"Deactivate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentTokenContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salePrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numItems\",\"type\":\"uint256\"}],\"name\":\"buyMetaLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activate(address,uint256,uint256,string,uint256)\":{\"details\":\"Activate public sale\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"baseURI()\":{\"details\":\"returns the base URI since the actual uri function is overridden\"},\"buyMetaLoot(uint256)\":{\"details\":\"Buy and mint MetaLoot\"},\"deactivate()\":{\"details\":\"Deactivate public sale\"},\"exists(uint256)\":{\"details\":\"Indicates weither any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256,string,bytes)\":{\"details\":\"mint a new token\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTokenURI(uint256,string)\":{\"details\":\"Updates tokenURI of `tokenId`.\"},\"withdrawFunds(address,address)\":{\"details\":\"Pull sales proceeds from contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaLoot.sol\":\"MetaLoot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xedf8db444aa542739a0aabe8243a4e8100003aacba9783637a75f16bb556ab44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates weither any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbabdad0b4e2eaf7d0c756c901f34d6d823538a45a7848c362349634216148986\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/MetaLoot.sol\":{\"content\":\"// contracts/MetaLoot.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/*\\n\\u2554\\u2566\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u250c\\u2500\\u2510\\u2566  \\u250c\\u2500\\u2510\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\n\\u2551\\u2551\\u2551\\u251c\\u2524  \\u2502 \\u251c\\u2500\\u2524\\u2551  \\u2502 \\u2502\\u2502 \\u2502 \\u2502\\n\\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534 \\u2534\\u2569\\u2550\\u255d\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518 \\u2534\\n\\ud835\\udd5e\\ud835\\udd52\\ud835\\udd55\\ud835\\udd56 \\ud835\\udd68\\ud835\\udd5a\\ud835\\udd65\\ud835\\udd59 \\u2665 \\ud835\\udd53\\ud835\\udd6a \\ud835\\udd44\\ud835\\udd56\\ud835\\udd65\\ud835\\udd52\\ud835\\udd3d\\ud835\\udd52\\ud835\\udd54\\ud835\\udd65\\ud835\\udd60\\ud835\\udd63\\ud835\\udd6a\\n*/\\ncontract MetaLoot is ERC1155Supply, Ownable {\\n  uint256 public saleTokenId;\\n  address public paymentTokenContract;\\n  uint256 public maxSupply;\\n  uint256 public salePrice;\\n  bool public saleActive;\\n\\n  bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n  // Base URI\\n  string private _baseURI;\\n\\n  // Custom token URIs for each NFT\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  event Activate(\\n    uint256 indexed tokenId,\\n    address paymentToken,\\n    uint256 price,\\n    uint256 maxSupply\\n  );\\n  event Deactivate(uint256 saleTokenId);\\n\\n  constructor(string memory uri_) ERC1155('') {\\n    _baseURI = uri_;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155) returns (bool) {\\n    return ERC1155.supportsInterface(interfaceId) || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n  }\\n\\n  /**\\n   * @dev returns the base URI since the actual uri function is overridden\\n   */\\n  function baseURI() public view returns (string memory) {\\n    return _baseURI;\\n  }\\n\\n  function setBaseURI(string memory uri_) external onlyOwner {\\n    _baseURI = uri_;\\n  }\\n\\n  function uri(uint256 tokenId) public view override returns (string memory) {\\n    return _tokenURI(tokenId);\\n  }\\n\\n  function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n    string memory uri_ = _tokenURIs[tokenId];\\n    string memory base_ = baseURI();\\n\\n    // If token URI is set, concatenate the baseURI and tokenURI\\n    if (bytes(uri_).length > 0) {\\n      return string(abi.encodePacked(base_, uri_));\\n    }\\n\\n    return base_;\\n  }\\n\\n  /**\\n   * @dev Updates tokenURI of `tokenId`.\\n   */\\n  function updateTokenURI(uint256 tokenId, string memory tokenUri_)\\n  external\\n  onlyOwner\\n  {\\n    _setTokenURI(tokenId, tokenUri_);\\n  }\\n\\n  /**\\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n   */\\n  function _setTokenURI(uint256 tokenId, string memory tokenUri_) internal {\\n    _tokenURIs[tokenId] = tokenUri_;\\n    emit URI(_tokenURI(tokenId), tokenId);\\n  }\\n\\n  /**\\n   * @dev Activate public sale\\n   */\\n  function activate(\\n    address paymentTokenContract_,\\n    uint256 salePrice_,\\n    uint256 saleTokenId_,\\n    string memory tokenURI_,\\n    uint256 maxSupply_\\n  ) external onlyOwner {\\n    require(!saleActive, 'Already active!');\\n    saleActive = true;\\n    saleTokenId = saleTokenId_;\\n    paymentTokenContract = paymentTokenContract_;\\n    salePrice = salePrice_;\\n    maxSupply = maxSupply_;\\n    _setTokenURI(saleTokenId_, tokenURI_);\\n    emit Activate(saleTokenId, paymentTokenContract, salePrice, maxSupply);\\n  }\\n\\n  /**\\n   * @dev Deactivate public sale\\n   */\\n  function deactivate() external onlyOwner {\\n    saleActive = false;\\n    emit Deactivate(saleTokenId);\\n  }\\n\\n  /**\\n   * @dev Buy and mint MetaLoot\\n   */\\n  function buyMetaLoot(uint256 numItems) external {\\n    require(saleActive, 'Inactive');\\n    require(numItems <= 5 && numItems > 0, 'Invalid amount requested');\\n\\n    IERC20 token = IERC20(paymentTokenContract);\\n    address self = address(this);\\n\\n    uint256 totalAmount = salePrice * numItems;\\n    require(\\n      token.allowance(msg.sender, self) >= totalAmount,\\n      'Token allowance too low'\\n    );\\n\\n    uint256 newSupply = ERC1155Supply.totalSupply(saleTokenId) + numItems;\\n    require(newSupply <= maxSupply, 'Requesting more than max supply');\\n\\n    bool sent = token.transferFrom(msg.sender, self, totalAmount);\\n    require(sent, 'Token transfer failed');\\n\\n    _mint(msg.sender, saleTokenId, numItems, '');\\n  }\\n\\n  /**\\n   * @dev Pull sales proceeds from contract\\n   */\\n  function withdrawFunds(IERC20 token, address recipient) external onlyOwner {\\n    uint256 contractBalance = token.balanceOf(address(this));\\n    token.transfer(recipient, contractBalance);\\n  }\\n\\n  /**\\n   * @dev mint a new token\\n   */\\n  function mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    string memory tokenUri_,\\n    bytes memory data\\n  ) external onlyOwner {\\n    _mint(account, id, amount, data);\\n    _setTokenURI(id, tokenUri_);\\n  }\\n\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 amount\\n  ) public {\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      'ERC1155: caller is not owner nor approved'\\n    );\\n\\n    _burn(account, id, amount);\\n  }\\n\\n  function burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) public {\\n    require(\\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n      'ERC1155: caller is not owner nor approved'\\n    );\\n\\n    _burnBatch(account, ids, amounts);\\n  }\\n\\n  uint256 private _royaltyBps;\\n  address payable private _royaltyRecipient;\\n\\n  /// @dev Sets token royalties\\n  /// @param recipient recipient of the royalties\\n  /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n  function setRoyalties(address payable recipient, uint256 value) internal {\\n    require(value <= 10000, 'ERC2981Royalties: Too high');\\n    _royaltyRecipient = recipient;\\n    _royaltyBps = value;\\n  }\\n\\n  function royaltyInfo(uint256, uint256 value) external view returns (address, uint256) {\\n    return (_royaltyRecipient, value * _royaltyBps / 10000);\\n  }\\n}\\n\",\"keccak256\":\"0x16bfe6b273cd2165aa6f651d0d90d631d126e81e7ec4df1cbee83668bbd425b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030ea380380620030ea833981016040819052620000349162000188565b6040805160208101909152600081526200004e8162000077565b506200005a3362000090565b80516200006f90600a906020840190620000e2565b5050620002b1565b80516200008c906002906020840190620000e2565b5050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000f0906200025e565b90600052602060002090601f0160209004810192826200011457600085556200015f565b82601f106200012f57805160ff19168380011785556200015f565b828001600101855582156200015f579182015b828111156200015f57825182559160200191906001019062000142565b506200016d92915062000171565b5090565b5b808211156200016d576000815560010162000172565b600060208083850312156200019b578182fd5b82516001600160401b0380821115620001b2578384fd5b818501915085601f830112620001c6578384fd5b815181811115620001db57620001db6200029b565b604051601f8201601f19908116603f011681019083821181831017156200020657620002066200029b565b8160405282815288868487010111156200021e578687fd5b8693505b8284101562000241578484018601518185018701529285019262000222565b828411156200025257868684830101525b98975050505050505050565b600181811c908216806200027357607f821691505b602082108114156200029557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612e2980620002c16000396000f3fe608060405234801561001057600080fd5b50600436106101cd5760003560e01c80636b20c45411610104578063a4b645eb116100a2578063f242432a11610071578063f242432a1461042b578063f2fde38b1461043e578063f51f96dd14610451578063f5298aca1461045a57600080fd5b8063a4b645eb146103b3578063bd85b039146103c6578063d5abeb01146103e6578063e985e9c5146103ef57600080fd5b806380acb136116100de57806380acb1361461036957806381b99cc71461037c5780638da5cb5b1461038f578063a22cb465146103a057600080fd5b80636b20c454146103465780636c0360eb14610359578063715018a61461036157600080fd5b80632eb2c2d6116101715780634f558e791161014b5780634f558e79146102fc57806351b42b001461031e57806355f804b31461032657806368428a1b1461033957600080fd5b80632eb2c2d61461029e5780634dcffde0146102b15780634e1273f4146102dc57600080fd5b80630e89341c116101ad5780630e89341c1461023057806310168e591461025057806318e97fd1146102595780632a55205a1461026c57600080fd5b80620fa9fb146101d2578062fdd58e146101e757806301ffc9a71461020d575b600080fd5b6101e56101e0366004612948565b61046d565b005b6101fa6101f5366004612707565b610604565b6040519081526020015b60405180910390f35b61022061021b366004612910565b6106a8565b6040519015158152602001610204565b61024361023e366004612995565b6106ed565b6040516102049190612b98565b6101fa60055481565b6101e56102673660046129c5565b6106f8565b61027f61027a366004612a00565b610760565b604080516001600160a01b039093168352602083019190915201610204565b6101e56102ac366004612556565b61079a565b6006546102c4906001600160a01b031681565b6040516001600160a01b039091168152602001610204565b6102ef6102ea366004612827565b61083c565b6040516102049190612b57565b61022061030a366004612995565b600090815260036020526040902054151590565b6101e56109b2565b6101e561033436600461295a565b610a4e565b6009546102209060ff1681565b6101e5610354366004612667565b610abb565b610243610b45565b6101e5610bd7565b6101e56103773660046127be565b610c3d565b6101e561038a366004612995565b610d95565b6004546001600160a01b03166102c4565b6101e56103ae3660046126da565b6110db565b6101e56103c1366004612766565b6111c6565b6101fa6103d4366004612995565b60009081526003602052604090205490565b6101fa60075481565b6102206103fd36600461251e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101e5610439366004612600565b611236565b6101e561044c366004612502565b6112bd565b6101fa60085481565b6101e5610468366004612732565b61139f565b6004546001600160a01b031633146104cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561052757600080fd5b505afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f91906129ad565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018390529192509084169063a9059cbb90604401602060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe91906128f4565b50505050565b60006001600160a01b0383166106825760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084016104c3565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006106b382611424565b806106e757506001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000145b92915050565b60606106e7826114bf565b6004546001600160a01b031633146107525760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b61075c82826115a3565b5050565b600d54600c5460009182916001600160a01b0390911690612710906107859086612c07565b61078f9190612be7565b915091509250929050565b6001600160a01b0385163314806107b657506107b685336103fd565b6108285760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104c3565b6108358585858585611607565b5050505050565b606081518351146108b55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104c3565b6000835167ffffffffffffffff8111156108df57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610908578160200160208202803683370190505b50905060005b84518110156109aa5761096f85828151811061093a57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061096257634e487b7160e01b600052603260045260246000fd5b6020026020010151610604565b82828151811061098f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526109a381612cd1565b905061090e565b509392505050565b6004546001600160a01b03163314610a0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b6009805460ff191690556005546040519081527f642028127038cd17804be50978266c980dbd2234656c49d7f9c43f15985cf0ad9060200160405180910390a1565b6004546001600160a01b03163314610aa85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b805161075c90600a906020840190612386565b6001600160a01b038316331480610ad75750610ad783336103fd565b610b355760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104c3565b610b40838383611879565b505050565b6060600a8054610b5490612c69565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8090612c69565b8015610bcd5780601f10610ba257610100808354040283529160200191610bcd565b820191906000526020600020905b815481529060010190602001808311610bb057829003601f168201915b5050505050905090565b6004546001600160a01b03163314610c315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b610c3b6000611917565b565b6004546001600160a01b03163314610c975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b60095460ff1615610cea5760405162461bcd60e51b815260206004820152600f60248201527f416c72656164792061637469766521000000000000000000000000000000000060448201526064016104c3565b6009805460ff191660011790556005839055600680546001600160a01b03871673ffffffffffffffffffffffffffffffffffffffff1990911617905560088490556007819055610d3a83836115a3565b600554600654600854600754604080516001600160a01b039094168452602084019290925282820152517fee4e96b139854fb8597f10446dfd7c975b847896a38363a4c923326fe8f06a059181900360600190a25050505050565b60095460ff16610de75760405162461bcd60e51b815260206004820152600860248201527f496e61637469766500000000000000000000000000000000000000000000000060448201526064016104c3565b60058111158015610df85750600081115b610e445760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420616d6f756e7420726571756573746564000000000000000060448201526064016104c3565b6006546008546001600160a01b03909116903090600090610e66908590612c07565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038481166024830152919250829185169063dd62ed3e9060440160206040518083038186803b158015610ecb57600080fd5b505afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0391906129ad565b1015610f515760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c6c6f77616e636520746f6f206c6f7700000000000000000060448201526064016104c3565b600554600090815260036020526040812054610f6e908690612bcf565b9050600754811115610fc25760405162461bcd60e51b815260206004820152601f60248201527f52657175657374696e67206d6f7265207468616e206d617820737570706c790060448201526064016104c3565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052600091908616906323b872dd90606401602060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106791906128f4565b9050806110b65760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c6564000000000000000000000060448201526064016104c3565b6110d3336005548860405180602001604052806000815250611976565b505050505050565b336001600160a01b038316141561115a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104c3565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6004546001600160a01b031633146112205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b61122c85858584611976565b61083584836115a3565b6001600160a01b038516331480611252575061125285336103fd565b6112b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104c3565b61083585858585856119ab565b6004546001600160a01b031633146113175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b6001600160a01b0381166113935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104c3565b61139c81611917565b50565b6001600160a01b0383163314806113bb57506113bb83336103fd565b6114195760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104c3565b610b40838383611b52565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061148757506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806106e757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106e7565b6000818152600b60205260408120805460609291906114dd90612c69565b80601f016020809104026020016040519081016040528092919081815260200182805461150990612c69565b80156115565780601f1061152b57610100808354040283529160200191611556565b820191906000526020600020905b81548152906001019060200180831161153957829003601f168201915b505050505090506000611567610b45565b82519091501561159c578082604051602001611584929190612a87565b60405160208183030381529060405292505050919050565b9392505050565b6000828152600b6020908152604090912082516115c292840190612386565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6115ee846114bf565b6040516115fb9190612b98565b60405180910390a25050565b81518351146116695760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104c3565b6001600160a01b0384166116cd5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104c3565b3360005b84518110156118135760008582815181106116fc57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061172857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117bb5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104c3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906117f8908490612bcf565b925050819055505050508061180c90612cd1565b90506116d1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611863929190612b6a565b60405180910390a46110d3818787878787611b85565b611884838383611d3a565b60005b82518110156105fe578181815181106118b057634e487b7160e01b600052603260045260246000fd5b6020026020010151600360008584815181106118dc57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546119019190612c26565b90915550611910905081612cd1565b9050611887565b600480546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61198284848484611f8b565b600083815260036020526040812080548492906119a0908490612bcf565b909155505050505050565b6001600160a01b038416611a0f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104c3565b33611a28818787611a1f886120a8565b610835886120a8565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611aac5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104c3565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611ae9908490612bcf565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b49828888888888612101565b50505050505050565b611b5d83838361220c565b60008281526003602052604081208054839290611b7b908490612c26565b9091555050505050565b6001600160a01b0384163b156110d35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bc99089908990889088908890600401612ab6565b602060405180830381600087803b158015611be357600080fd5b505af1925050508015611c13575060408051601f3d908101601f19168201909252611c109181019061292c565b60015b611cc957611c1f612d18565b806308c379a01415611c595750611c34612d30565b80611c3f5750611c5b565b8060405162461bcd60e51b81526004016104c39190612b98565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104c3565b6001600160e01b0319811663bc197c8160e01b14611b495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104c3565b6001600160a01b038316611d9c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104c3565b8051825114611dfe5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104c3565b604080516020810190915260009081905233905b8351811015611f2c576000848281518110611e3d57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611e6957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015611ef55760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104c3565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580611f2481612cd1565b915050611e12565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f7d929190612b6a565b60405180910390a450505050565b6001600160a01b0384166120075760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104c3565b3361201881600087611a1f886120a8565b6000848152602081815260408083206001600160a01b038916845290915281208054859290612048908490612bcf565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461083581600087878787612101565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106120f057634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156110d35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121459089908990889088908890600401612b14565b602060405180830381600087803b15801561215f57600080fd5b505af192505050801561218f575060408051601f3d908101601f1916820190925261218c9181019061292c565b60015b61219b57611c1f612d18565b6001600160e01b0319811663f23a6e6160e01b14611b495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104c3565b6001600160a01b03831661226e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104c3565b3361229e8185600061227f876120a8565b612288876120a8565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561231b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104c3565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b82805461239290612c69565b90600052602060002090601f0160209004810192826123b457600085556123fa565b82601f106123cd57805160ff19168380011785556123fa565b828001600101855582156123fa579182015b828111156123fa5782518255916020019190600101906123df565b5061240692915061240a565b5090565b5b80821115612406576000815560010161240b565b600082601f83011261242f578081fd5b8135602061243c82612bab565b6040516124498282612ca4565b8381528281019150858301600585901b87018401881015612468578586fd5b855b858110156124865781358452928401929084019060010161246a565b5090979650505050505050565b600082601f8301126124a3578081fd5b813567ffffffffffffffff8111156124bd576124bd612d02565b6040516124d4601f8301601f191660200182612ca4565b8181528460208386010111156124e8578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612513578081fd5b813561159c81612dba565b60008060408385031215612530578081fd5b823561253b81612dba565b9150602083013561254b81612dba565b809150509250929050565b600080600080600060a0868803121561256d578081fd5b853561257881612dba565b9450602086013561258881612dba565b9350604086013567ffffffffffffffff808211156125a4578283fd5b6125b089838a0161241f565b945060608801359150808211156125c5578283fd5b6125d189838a0161241f565b935060808801359150808211156125e6578283fd5b506125f388828901612493565b9150509295509295909350565b600080600080600060a08688031215612617578081fd5b853561262281612dba565b9450602086013561263281612dba565b93506040860135925060608601359150608086013567ffffffffffffffff81111561265b578182fd5b6125f388828901612493565b60008060006060848603121561267b578283fd5b833561268681612dba565b9250602084013567ffffffffffffffff808211156126a2578384fd5b6126ae8783880161241f565b935060408601359150808211156126c3578283fd5b506126d08682870161241f565b9150509250925092565b600080604083850312156126ec578182fd5b82356126f781612dba565b9150602083013561254b81612dcf565b60008060408385031215612719578182fd5b823561272481612dba565b946020939093013593505050565b600080600060608486031215612746578081fd5b833561275181612dba565b95602085013595506040909401359392505050565b600080600080600060a0868803121561277d578283fd5b853561278881612dba565b94506020860135935060408601359250606086013567ffffffffffffffff808211156127b2578283fd5b6125d189838a01612493565b600080600080600060a086880312156127d5578283fd5b85356127e081612dba565b94506020860135935060408601359250606086013567ffffffffffffffff811115612809578182fd5b61281588828901612493565b95989497509295608001359392505050565b60008060408385031215612839578182fd5b823567ffffffffffffffff80821115612850578384fd5b818501915085601f830112612863578384fd5b8135602061287082612bab565b60405161287d8282612ca4565b8381528281019150858301600585901b870184018b101561289c578889fd5b8896505b848710156128c75780356128b381612dba565b8352600196909601959183019183016128a0565b50965050860135925050808211156128dd578283fd5b506128ea8582860161241f565b9150509250929050565b600060208284031215612905578081fd5b815161159c81612dcf565b600060208284031215612921578081fd5b813561159c81612ddd565b60006020828403121561293d578081fd5b815161159c81612ddd565b60008060408385031215612530578182fd5b60006020828403121561296b578081fd5b813567ffffffffffffffff811115612981578182fd5b61298d84828501612493565b949350505050565b6000602082840312156129a6578081fd5b5035919050565b6000602082840312156129be578081fd5b5051919050565b600080604083850312156129d7578182fd5b82359150602083013567ffffffffffffffff8111156129f4578182fd5b6128ea85828601612493565b60008060408385031215612a12578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612a5057815187529582019590820190600101612a34565b509495945050505050565b60008151808452612a73816020860160208601612c3d565b601f01601f19169290920160200192915050565b60008351612a99818460208801612c3d565b835190830190612aad818360208801612c3d565b01949350505050565b60006001600160a01b03808816835280871660208401525060a06040830152612ae260a0830186612a21565b8281036060840152612af48186612a21565b90508281036080840152612b088185612a5b565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612b4c60a0830184612a5b565b979650505050505050565b60208152600061159c6020830184612a21565b604081526000612b7d6040830185612a21565b8281036020840152612b8f8185612a21565b95945050505050565b60208152600061159c6020830184612a5b565b600067ffffffffffffffff821115612bc557612bc5612d02565b5060051b60200190565b60008219821115612be257612be2612cec565b500190565b600082612c0257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612c2157612c21612cec565b500290565b600082821015612c3857612c38612cec565b500390565b60005b83811015612c58578181015183820152602001612c40565b838111156105fe5750506000910152565b600181811c90821680612c7d57607f821691505b60208210811415612c9e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612cca57612cca612d02565b6040525050565b6000600019821415612ce557612ce5612cec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612d2d57600481823e5160e01c5b90565b600060443d1015612d3e5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612d6e57505050505090565b8285019150815181811115612d865750505050505090565b843d8701016020828501011115612da05750505050505090565b612daf60208286010187612ca4565b509095945050505050565b6001600160a01b038116811461139c57600080fd5b801515811461139c57600080fd5b6001600160e01b03198116811461139c57600080fdfea2646970667358221220bc46dc7a95861fca3bb24d7fa3e40139ee1c0ba6981f4ba2a9ab8c6245b08fb064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cd5760003560e01c80636b20c45411610104578063a4b645eb116100a2578063f242432a11610071578063f242432a1461042b578063f2fde38b1461043e578063f51f96dd14610451578063f5298aca1461045a57600080fd5b8063a4b645eb146103b3578063bd85b039146103c6578063d5abeb01146103e6578063e985e9c5146103ef57600080fd5b806380acb136116100de57806380acb1361461036957806381b99cc71461037c5780638da5cb5b1461038f578063a22cb465146103a057600080fd5b80636b20c454146103465780636c0360eb14610359578063715018a61461036157600080fd5b80632eb2c2d6116101715780634f558e791161014b5780634f558e79146102fc57806351b42b001461031e57806355f804b31461032657806368428a1b1461033957600080fd5b80632eb2c2d61461029e5780634dcffde0146102b15780634e1273f4146102dc57600080fd5b80630e89341c116101ad5780630e89341c1461023057806310168e591461025057806318e97fd1146102595780632a55205a1461026c57600080fd5b80620fa9fb146101d2578062fdd58e146101e757806301ffc9a71461020d575b600080fd5b6101e56101e0366004612948565b61046d565b005b6101fa6101f5366004612707565b610604565b6040519081526020015b60405180910390f35b61022061021b366004612910565b6106a8565b6040519015158152602001610204565b61024361023e366004612995565b6106ed565b6040516102049190612b98565b6101fa60055481565b6101e56102673660046129c5565b6106f8565b61027f61027a366004612a00565b610760565b604080516001600160a01b039093168352602083019190915201610204565b6101e56102ac366004612556565b61079a565b6006546102c4906001600160a01b031681565b6040516001600160a01b039091168152602001610204565b6102ef6102ea366004612827565b61083c565b6040516102049190612b57565b61022061030a366004612995565b600090815260036020526040902054151590565b6101e56109b2565b6101e561033436600461295a565b610a4e565b6009546102209060ff1681565b6101e5610354366004612667565b610abb565b610243610b45565b6101e5610bd7565b6101e56103773660046127be565b610c3d565b6101e561038a366004612995565b610d95565b6004546001600160a01b03166102c4565b6101e56103ae3660046126da565b6110db565b6101e56103c1366004612766565b6111c6565b6101fa6103d4366004612995565b60009081526003602052604090205490565b6101fa60075481565b6102206103fd36600461251e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101e5610439366004612600565b611236565b6101e561044c366004612502565b6112bd565b6101fa60085481565b6101e5610468366004612732565b61139f565b6004546001600160a01b031633146104cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561052757600080fd5b505afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f91906129ad565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018390529192509084169063a9059cbb90604401602060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fe91906128f4565b50505050565b60006001600160a01b0383166106825760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084016104c3565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006106b382611424565b806106e757506001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000145b92915050565b60606106e7826114bf565b6004546001600160a01b031633146107525760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b61075c82826115a3565b5050565b600d54600c5460009182916001600160a01b0390911690612710906107859086612c07565b61078f9190612be7565b915091509250929050565b6001600160a01b0385163314806107b657506107b685336103fd565b6108285760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104c3565b6108358585858585611607565b5050505050565b606081518351146108b55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104c3565b6000835167ffffffffffffffff8111156108df57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610908578160200160208202803683370190505b50905060005b84518110156109aa5761096f85828151811061093a57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061096257634e487b7160e01b600052603260045260246000fd5b6020026020010151610604565b82828151811061098f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526109a381612cd1565b905061090e565b509392505050565b6004546001600160a01b03163314610a0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b6009805460ff191690556005546040519081527f642028127038cd17804be50978266c980dbd2234656c49d7f9c43f15985cf0ad9060200160405180910390a1565b6004546001600160a01b03163314610aa85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b805161075c90600a906020840190612386565b6001600160a01b038316331480610ad75750610ad783336103fd565b610b355760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104c3565b610b40838383611879565b505050565b6060600a8054610b5490612c69565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8090612c69565b8015610bcd5780601f10610ba257610100808354040283529160200191610bcd565b820191906000526020600020905b815481529060010190602001808311610bb057829003601f168201915b5050505050905090565b6004546001600160a01b03163314610c315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b610c3b6000611917565b565b6004546001600160a01b03163314610c975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b60095460ff1615610cea5760405162461bcd60e51b815260206004820152600f60248201527f416c72656164792061637469766521000000000000000000000000000000000060448201526064016104c3565b6009805460ff191660011790556005839055600680546001600160a01b03871673ffffffffffffffffffffffffffffffffffffffff1990911617905560088490556007819055610d3a83836115a3565b600554600654600854600754604080516001600160a01b039094168452602084019290925282820152517fee4e96b139854fb8597f10446dfd7c975b847896a38363a4c923326fe8f06a059181900360600190a25050505050565b60095460ff16610de75760405162461bcd60e51b815260206004820152600860248201527f496e61637469766500000000000000000000000000000000000000000000000060448201526064016104c3565b60058111158015610df85750600081115b610e445760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420616d6f756e7420726571756573746564000000000000000060448201526064016104c3565b6006546008546001600160a01b03909116903090600090610e66908590612c07565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038481166024830152919250829185169063dd62ed3e9060440160206040518083038186803b158015610ecb57600080fd5b505afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0391906129ad565b1015610f515760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c6c6f77616e636520746f6f206c6f7700000000000000000060448201526064016104c3565b600554600090815260036020526040812054610f6e908690612bcf565b9050600754811115610fc25760405162461bcd60e51b815260206004820152601f60248201527f52657175657374696e67206d6f7265207468616e206d617820737570706c790060448201526064016104c3565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052600091908616906323b872dd90606401602060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106791906128f4565b9050806110b65760405162461bcd60e51b815260206004820152601560248201527f546f6b656e207472616e73666572206661696c6564000000000000000000000060448201526064016104c3565b6110d3336005548860405180602001604052806000815250611976565b505050505050565b336001600160a01b038316141561115a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104c3565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6004546001600160a01b031633146112205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b61122c85858584611976565b61083584836115a3565b6001600160a01b038516331480611252575061125285336103fd565b6112b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104c3565b61083585858585856119ab565b6004546001600160a01b031633146113175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c3565b6001600160a01b0381166113935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104c3565b61139c81611917565b50565b6001600160a01b0383163314806113bb57506113bb83336103fd565b6114195760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104c3565b610b40838383611b52565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061148757506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806106e757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106e7565b6000818152600b60205260408120805460609291906114dd90612c69565b80601f016020809104026020016040519081016040528092919081815260200182805461150990612c69565b80156115565780601f1061152b57610100808354040283529160200191611556565b820191906000526020600020905b81548152906001019060200180831161153957829003601f168201915b505050505090506000611567610b45565b82519091501561159c578082604051602001611584929190612a87565b60405160208183030381529060405292505050919050565b9392505050565b6000828152600b6020908152604090912082516115c292840190612386565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6115ee846114bf565b6040516115fb9190612b98565b60405180910390a25050565b81518351146116695760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104c3565b6001600160a01b0384166116cd5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104c3565b3360005b84518110156118135760008582815181106116fc57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061172857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117bb5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104c3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906117f8908490612bcf565b925050819055505050508061180c90612cd1565b90506116d1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611863929190612b6a565b60405180910390a46110d3818787878787611b85565b611884838383611d3a565b60005b82518110156105fe578181815181106118b057634e487b7160e01b600052603260045260246000fd5b6020026020010151600360008584815181106118dc57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546119019190612c26565b90915550611910905081612cd1565b9050611887565b600480546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61198284848484611f8b565b600083815260036020526040812080548492906119a0908490612bcf565b909155505050505050565b6001600160a01b038416611a0f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104c3565b33611a28818787611a1f886120a8565b610835886120a8565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611aac5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016104c3565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611ae9908490612bcf565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b49828888888888612101565b50505050505050565b611b5d83838361220c565b60008281526003602052604081208054839290611b7b908490612c26565b9091555050505050565b6001600160a01b0384163b156110d35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bc99089908990889088908890600401612ab6565b602060405180830381600087803b158015611be357600080fd5b505af1925050508015611c13575060408051601f3d908101601f19168201909252611c109181019061292c565b60015b611cc957611c1f612d18565b806308c379a01415611c595750611c34612d30565b80611c3f5750611c5b565b8060405162461bcd60e51b81526004016104c39190612b98565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104c3565b6001600160e01b0319811663bc197c8160e01b14611b495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104c3565b6001600160a01b038316611d9c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104c3565b8051825114611dfe5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104c3565b604080516020810190915260009081905233905b8351811015611f2c576000848281518110611e3d57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611e6957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015611ef55760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104c3565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580611f2481612cd1565b915050611e12565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f7d929190612b6a565b60405180910390a450505050565b6001600160a01b0384166120075760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104c3565b3361201881600087611a1f886120a8565b6000848152602081815260408083206001600160a01b038916845290915281208054859290612048908490612bcf565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461083581600087878787612101565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106120f057634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156110d35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121459089908990889088908890600401612b14565b602060405180830381600087803b15801561215f57600080fd5b505af192505050801561218f575060408051601f3d908101601f1916820190925261218c9181019061292c565b60015b61219b57611c1f612d18565b6001600160e01b0319811663f23a6e6160e01b14611b495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104c3565b6001600160a01b03831661226e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104c3565b3361229e8185600061227f876120a8565b612288876120a8565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561231b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104c3565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b82805461239290612c69565b90600052602060002090601f0160209004810192826123b457600085556123fa565b82601f106123cd57805160ff19168380011785556123fa565b828001600101855582156123fa579182015b828111156123fa5782518255916020019190600101906123df565b5061240692915061240a565b5090565b5b80821115612406576000815560010161240b565b600082601f83011261242f578081fd5b8135602061243c82612bab565b6040516124498282612ca4565b8381528281019150858301600585901b87018401881015612468578586fd5b855b858110156124865781358452928401929084019060010161246a565b5090979650505050505050565b600082601f8301126124a3578081fd5b813567ffffffffffffffff8111156124bd576124bd612d02565b6040516124d4601f8301601f191660200182612ca4565b8181528460208386010111156124e8578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612513578081fd5b813561159c81612dba565b60008060408385031215612530578081fd5b823561253b81612dba565b9150602083013561254b81612dba565b809150509250929050565b600080600080600060a0868803121561256d578081fd5b853561257881612dba565b9450602086013561258881612dba565b9350604086013567ffffffffffffffff808211156125a4578283fd5b6125b089838a0161241f565b945060608801359150808211156125c5578283fd5b6125d189838a0161241f565b935060808801359150808211156125e6578283fd5b506125f388828901612493565b9150509295509295909350565b600080600080600060a08688031215612617578081fd5b853561262281612dba565b9450602086013561263281612dba565b93506040860135925060608601359150608086013567ffffffffffffffff81111561265b578182fd5b6125f388828901612493565b60008060006060848603121561267b578283fd5b833561268681612dba565b9250602084013567ffffffffffffffff808211156126a2578384fd5b6126ae8783880161241f565b935060408601359150808211156126c3578283fd5b506126d08682870161241f565b9150509250925092565b600080604083850312156126ec578182fd5b82356126f781612dba565b9150602083013561254b81612dcf565b60008060408385031215612719578182fd5b823561272481612dba565b946020939093013593505050565b600080600060608486031215612746578081fd5b833561275181612dba565b95602085013595506040909401359392505050565b600080600080600060a0868803121561277d578283fd5b853561278881612dba565b94506020860135935060408601359250606086013567ffffffffffffffff808211156127b2578283fd5b6125d189838a01612493565b600080600080600060a086880312156127d5578283fd5b85356127e081612dba565b94506020860135935060408601359250606086013567ffffffffffffffff811115612809578182fd5b61281588828901612493565b95989497509295608001359392505050565b60008060408385031215612839578182fd5b823567ffffffffffffffff80821115612850578384fd5b818501915085601f830112612863578384fd5b8135602061287082612bab565b60405161287d8282612ca4565b8381528281019150858301600585901b870184018b101561289c578889fd5b8896505b848710156128c75780356128b381612dba565b8352600196909601959183019183016128a0565b50965050860135925050808211156128dd578283fd5b506128ea8582860161241f565b9150509250929050565b600060208284031215612905578081fd5b815161159c81612dcf565b600060208284031215612921578081fd5b813561159c81612ddd565b60006020828403121561293d578081fd5b815161159c81612ddd565b60008060408385031215612530578182fd5b60006020828403121561296b578081fd5b813567ffffffffffffffff811115612981578182fd5b61298d84828501612493565b949350505050565b6000602082840312156129a6578081fd5b5035919050565b6000602082840312156129be578081fd5b5051919050565b600080604083850312156129d7578182fd5b82359150602083013567ffffffffffffffff8111156129f4578182fd5b6128ea85828601612493565b60008060408385031215612a12578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612a5057815187529582019590820190600101612a34565b509495945050505050565b60008151808452612a73816020860160208601612c3d565b601f01601f19169290920160200192915050565b60008351612a99818460208801612c3d565b835190830190612aad818360208801612c3d565b01949350505050565b60006001600160a01b03808816835280871660208401525060a06040830152612ae260a0830186612a21565b8281036060840152612af48186612a21565b90508281036080840152612b088185612a5b565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612b4c60a0830184612a5b565b979650505050505050565b60208152600061159c6020830184612a21565b604081526000612b7d6040830185612a21565b8281036020840152612b8f8185612a21565b95945050505050565b60208152600061159c6020830184612a5b565b600067ffffffffffffffff821115612bc557612bc5612d02565b5060051b60200190565b60008219821115612be257612be2612cec565b500190565b600082612c0257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612c2157612c21612cec565b500290565b600082821015612c3857612c38612cec565b500390565b60005b83811015612c58578181015183820152602001612c40565b838111156105fe5750506000910152565b600181811c90821680612c7d57607f821691505b60208210811415612c9e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612cca57612cca612d02565b6040525050565b6000600019821415612ce557612ce5612cec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612d2d57600481823e5160e01c5b90565b600060443d1015612d3e5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612d6e57505050505090565b8285019150815181811115612d865750505050505090565b843d8701016020828501011115612da05750505050505090565b612daf60208286010187612ca4565b509095945050505050565b6001600160a01b038116811461139c57600080fd5b801515811461139c57600080fd5b6001600160e01b03198116811461139c57600080fdfea2646970667358221220bc46dc7a95861fca3bb24d7fa3e40139ee1c0ba6981f4ba2a9ab8c6245b08fb064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activate(address,uint256,uint256,string,uint256)": {
        "details": "Activate public sale"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "baseURI()": {
        "details": "returns the base URI since the actual uri function is overridden"
      },
      "buyMetaLoot(uint256)": {
        "details": "Buy and mint MetaLoot"
      },
      "deactivate()": {
        "details": "Deactivate public sale"
      },
      "exists(uint256)": {
        "details": "Indicates weither any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256,string,bytes)": {
        "details": "mint a new token"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTokenURI(uint256,string)": {
        "details": "Updates tokenURI of `tokenId`."
      },
      "withdrawFunds(address,address)": {
        "details": "Pull sales proceeds from contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 135,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 137,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1426,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2636,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "saleTokenId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2638,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "paymentTokenContract",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2640,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "maxSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2642,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "salePrice",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2644,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "saleActive",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 2649,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2653,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3097,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_royaltyBps",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3099,
        "contract": "contracts/MetaLoot.sol:MetaLoot",
        "label": "_royaltyRecipient",
        "offset": 0,
        "slot": "13",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}